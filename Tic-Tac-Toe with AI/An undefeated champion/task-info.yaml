type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;


    public class Main {
        public static void fillBoard(String fieldLine, char[][] board) {
            int current = 0;

            for (int row = 2; row >= 0; row--) {
                for (int col = 0; col <= 2; col++) {
                    board[row][col] = fieldLine.charAt(current++);
                }
            }

        }

        public static void printBoard(char[][] board) {
            System.out.println("---------");

            for (int row = 2; row >= 0; row--) {
                System.out.print("| ");
                for (int col = 0; col <= 2; col++) {
                    System.out.print(board[row][col] + " ");
                }
                System.out.print("|");

                System.out.println();
            }
            System.out.println("---------");

        }

        public static char turn(char[][] board) {
            int countX = 0;
            int countO = 0;
            for (int row = 2; row >= 0; row--) {
                for (int col = 0; col <= 2; col++) {
                    if (board[row][col] == 'X') {
                        countX++;
                    }
                    if (board[row][col] == 'O') {
                        countO++;
                    }
                }
            }
            return countX > countO ? 'O' : 'X';
        }

        public static void checkGame(char[][] board) {
            int countDiaX = 0;
            int countDiaO = 0;
            boolean empty = false;
            String result = "Draw";
            for (int row = 2; row >= 0; row--) {
                int countLineO = 0;
                int countLineX = 0;
                if (board[row][row] == 'X') {
                    countDiaX++;
                    if (countDiaX == 3) {
                        result = "X wins";
                        break;
                    }
                }
                if (board[row][row] == 'O') {
                    countDiaO++;
                    if (countDiaO == 3) {
                        result = "O wins";
                        break;
                    }
                }
                if(board[2][0] == 'X' && board[1][1] == 'X' && board[0][2] == 'X') {
                    result = "X wins";

                    break;
                }
                if (board[0][row] == 'X' && board[1][row] == 'X' && board[2][row] == 'X') {
                    result = "X wins";

                    break;
                }
                if (board[0][row] == 'O' && board[1][row] == 'O' && board[2][row] == 'O') {
                    result = "O wins";

                    break;
                }
                for (int col = 0; col <= 2; col++) {
                    if (board[row][col] == 'X') {
                        countLineX++;
                        if (countLineX == 3) {
                            result = "X wins";

                            break;
                        }
                    } else {
                        countLineX = 0;
                    }

                    if (board[row][col] == 'O') {
                        countLineO++;
                        if (countLineO == 3) {
                            result = "O wins";

                            break;
                        }
                    } else {
                        countLineO = 0;
                    }
                    if(board[row][col] == '_') {
                        empty = true;
                    }

                }
            }
            if(result.equals("Draw") && empty) {
                result = "Game not finished";
            }
            System.out.println(result);
        }

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter cells: ");
            String fieldLine = scanner.nextLine();
            char[][] board = new char[3][3];
            fillBoard(fieldLine, board);
            printBoard(board);
            boolean inValid = true;

            while (inValid) {
                int row;
                int col;
                System.out.print("Enter coordinates: ");
                String coordinates = scanner.nextLine();
                try {
                    row = Integer.parseInt(String.valueOf(coordinates.charAt(0))) - 1;
                    col = Integer.parseInt(String.valueOf(coordinates.charAt(2))) - 1;
                    if (row >= 0 && row <= 2 && col >= 0 && col <= 2) {
                        if (board[col][row] != '_') {
                            System.out.println("This cell is occupied! Choose another one!");
                            inValid = true;
                        } else {
                            board[col][row] = turn(board);
                            printBoard(board);
                            checkGame(board);
                            inValid = false;
                        }
                    }

                    if (row < 0 || row > 2 || col < 0 || col > 2) {
                        System.out.println("Coordinates should be from 1 to 3!");
                    }

                } catch (NumberFormatException e) {
                    System.out.println("You should enter numbers!");

                }
            }


        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }

        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 6) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    case 4: initial = "start user hard\n"; break;
                    case 5: initial = "start hard user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard hard\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard easy\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Human.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class Human extends Player {
        static String coordinate;
        char character;

        public Human(char character) {
            this.character = character;
        }

        @Override
        public String makeMove(char[][] board) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter coordinates: ");
            coordinate = scanner.nextLine();
            return coordinate;
        }
    }
  learner_created: true
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    public class Board {
        private static final char[][] board = new char[3][3];

        public void fillBoard(String fieldLine) {
            int current = 0;

            for (int row = 2; row >= 0; row--) {
                for (int col = 0; col <= 2; col++) {
                    board[row][col] = fieldLine.charAt(current++);
                }
            }

        }

        public char[][] getBoard() {
            return board.clone();
        }

        public void printBoard() {
            System.out.println("---------");

            for (int row = 2; row >= 0; row--) {
                System.out.print("| ");
                for (int col = 0; col <= 2; col++) {
                    System.out.print(board[row][col] + " ");
                }
                System.out.print("|");

                System.out.println();
            }
            System.out.println("---------");

        }
    }
  learner_created: true
- name: src/tictactoe/Medium.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class Medium extends Player {
        static String coordinate;
        char character;
        char opponent;

        public Medium(char character) {
            this.character = character;
            if (this.character == 'X') {
                this.opponent = 'O';
            } else {
                this.opponent = 'X';
            }
        }

        @Override
        public String makeMove(char[][] board) {
            System.out.println("Making move level \"medium\"");
            coordinate = mediumPlay(board);
            return coordinate;
        }

        public static String mediumPlayRandom(char[][] board) {
            Random random = new Random();
            int row = 0;
            int col = 0;
            boolean invalid = true;
            while (invalid) {
                row = random.nextInt(3) + 1;
                col = random.nextInt(3) + 1;
                if (board[col - 1][row - 1] == ' ') {
                    invalid = false;
                }
            }
            return row + " " + col;
        }

        // It was mediumPlay
        // public static String mediumPlay(char[][] board) {
        //     Random random = new Random();
        //     int row = 0;
        //     int col = 0;
        //     boolean invalid = true;
        //     while (invalid) {
        //         row = random.nextInt(3) + 1;
        //         col = random.nextInt(3) + 1;
        //         if (board[col - 1][row - 1] == ' ') {
        //             invalid = false;
        //         }
        //     }
        //     return row + " " + col;
        // }

        // It was checkWillWin
        public String mediumPlay(char[][] board) {
            if (!"".equals(checkRowsWin(board, character))) {
                //System.out.println("win " + checkRowsWin(board, character));
                return checkRowsWin(board, character);
            }
            if (!"".equals(checkRowsLose(board, opponent))) {
                //System.out.println("lose " + checkRowsWin(board, opponent));
                return checkRowsLose(board, opponent);
            }
            if (!"".equals(checkColWin(board, character))) {
                //System.out.println("win " + checkColWin(board, character));
                return checkColWin(board, character);
            }
            if (!"".equals(checkDiaWin(board, character))) {
                //System.out.println("win " + checkDiaWin(board, character));
                return checkDiaWin(board, character);
            }
            if (!"".equals(checkRowsLose(board, opponent))) {
                return checkRowsLose(board, opponent);
            }
            if (!"".equals(checkColLose(board, opponent))) {
                //System.out.println("lose " + checkColLose(board, opponent));
                return checkColLose(board, opponent);
            }
            if (!"".equals(checkDiaLose(board, opponent))) {
                //System.out.println("Lose " + checkDiaLose(board, opponent));
                return checkDiaLose(board, opponent);
            }

            return mediumPlayRandom(board);
        }

        // public String checkWillWin(char[][] board) {
        //     if(!"".equals(checkRowsWin(board, character))) {
        //         return checkRowsWin(board, character);
        //     }
        //     if(!"".equals(checkColWin(board, character))) {
        //         return checkColWin(board, character);
        //     }
        //     if(!"".equals(checkDiaWin(board, character))) {
        //         return checkDiaWin(board, character);
        //     }
        //     if(!"".equals(checkRowsLose(board, opponent))) {
        //         return checkRowsLose(board, opponent);
        //     }
        //     if(!"".equals(checkColLose(board, opponent))) {
        //         return checkColLose(board, opponent);
        //     }
        //     if(!"".equals(checkDiaLose(board, opponent))) {
        //         return checkDiaLose(board, opponent);
        //     }
        //
        //     return "";
        // }

        public String checkRowsWin(char[][] board, char character) {
            int countCharacter = 0;
            String emptyXY = "";
            boolean empty;
            for (int row = 0; row <= 2; row++) {
                countCharacter = 0;
                empty = false;

                for (int col = 0; col <= 2; col++) {
                    if (board[row][col] == ' ') {
                        empty = true;
                        emptyXY = (col + 1) + " " + (row + 1);
                    }
                    if (board[row][col] == character) {
                        countCharacter++;
                    }
                    if (countCharacter == 2 && empty) {
                        return emptyXY;
                    }
                }
            }
            return "";
        }

        public String checkRowsLose(char[][] board, char character) {
            int countCharacter = 0;
            String emptyXY = "";
            boolean empty;
            for (int row = 0; row <= 2; row++) {
                countCharacter = 0;
                empty = false;

                for (int col = 0; col <= 2; col++) {
                    if (board[row][col] == ' ') {
                        empty = true;
                        emptyXY = (col + 1) + " " + (row + 1);
                    }
                    if (board[row][col] == character) {
                        countCharacter++;
                    }
                    if (countCharacter == 2 && empty) {
                        return emptyXY;
                    }
                }
            }
            return "";
        }

        public String checkColWin(char[][] board, char character) {
            int countCharacter = 0;
            String emptyXY = "";
            boolean empty;
            for (int col = 0; col <= 2; col++) {
                countCharacter = 0;
                empty = false;
                if (board[0][col] == ' ') {
                    empty = true;
                    emptyXY = (col + 1) + " " + 1;
                }
                if (board[1][col] == ' ') {
                    empty = true;
                    emptyXY = (col + 1) + " " + 2;
                }
                if (board[2][col] == ' ') {
                    empty = true;
                    emptyXY = (col + 1) + " " + 3;
                }
                if (board[0][col] == character) {
                    countCharacter++;
                }
                if (board[1][col] == character) {
                    countCharacter++;
                }
                if (board[2][col] == character) {
                    countCharacter++;
                }
                if (countCharacter == 2 && empty) {
                    return emptyXY;
                }

            }
            return "";
        }

        public String checkColLose(char[][] board, char character) {
            int countCharacter = 0;
            String emptyXY = "";
            boolean empty;
            for (int col = 0; col <= 2; col++) {
                countCharacter = 0;
                empty = false;
                if (board[0][col] == ' ') {
                    empty = true;
                    emptyXY = (col + 1) + " " + 1;
                }
                if (board[1][col] == ' ') {
                    empty = true;
                    emptyXY = (col + 1) + " " + 2;
                }
                if (board[2][col] == ' ') {
                    empty = true;
                    emptyXY = (col + 1) + " " + 3;
                }
                if (board[0][col] == character) {
                    countCharacter++;
                }
                if (board[1][col] == character) {
                    countCharacter++;
                }
                if (board[2][col] == character) {
                    countCharacter++;
                }
                if (countCharacter == 2 && empty) {
                    return emptyXY;
                }

            }
            return "";
        }

        public String checkDiaWin(char[][] board, char character) {
            int countCharacter = 0;
            String emptyXY = "";
            boolean empty = false;
            if (board[2][0] == ' ') {
                empty = true;
                emptyXY = 1 + " " + 3;
            }
            if (board[1][1] == ' ') {
                empty = true;
                emptyXY = 2 + " " + 2;
            }
            if (board[0][2] == ' ') {
                empty = true;
                emptyXY = 3 + " " + 1;
            }
            if (board[2][0] == character) {
                countCharacter++;
            }
            if (board[1][1] == character) {
                countCharacter++;
            }
            if (board[0][2] == character) {
                countCharacter++;
            }

            if (countCharacter == 2 && empty) {
                return emptyXY;
            }

            countCharacter = 0;
            emptyXY = "";
            empty = false;
            if (board[2][2] == ' ') {
                empty = true;
                emptyXY = 3 + " " + 3;
            }
            if (board[1][1] == ' ') {
                empty = true;
                emptyXY = 2 + " " + 2;
            }
            if (board[0][0] == ' ') {
                empty = true;
                emptyXY = 1 + " " + 1;
            }
            if (board[2][2] == character) {
                countCharacter++;
            }
            if (board[1][1] == character) {
                countCharacter++;
            }
            if (board[0][0] == character) {
                countCharacter++;
            }

            if (countCharacter == 2 && empty) {
                return emptyXY;
            }

            return "";
        }

        public String checkDiaLose(char[][] board, char character) {
            int countCharacter = 0;
            String emptyXY = "";
            boolean empty = false;
            if (board[2][0] == ' ') {
                empty = true;
                emptyXY = 3 + " " + 1;
            }
            if (board[1][1] == ' ') {
                empty = true;
                emptyXY = 2 + " " + 2;
            }
            if (board[0][2] == ' ') {
                empty = true;
                emptyXY = 1 + " " + 3;
            }
            if (board[2][0] == character) {
                countCharacter++;
            }
            if (board[1][1] == character) {
                countCharacter++;
            }
            if (board[0][2] == character) {
                countCharacter++;
            }

            if (countCharacter == 2 && empty) {
                return emptyXY;
            }

            countCharacter = 0;
            emptyXY = "";
            empty = false;
            if (board[2][2] == ' ') {
                empty = true;
                emptyXY = 3 + " " + 3;
            }
            if (board[1][1] == ' ') {
                empty = true;
                emptyXY = 2 + " " + 2;
            }
            if (board[0][0] == ' ') {
                empty = true;
                emptyXY = 1 + " " + 1;
            }
            if (board[2][2] == character) {
                countCharacter++;
            }
            if (board[1][1] == character) {
                countCharacter++;
            }
            if (board[0][0] == character) {
                countCharacter++;
            }

            if (countCharacter == 2 && empty) {
                return emptyXY;
            }

            return "";
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class Player {
        static String coordinate;

        public String makeMove(char[][] board) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter coordinates: ");
            coordinate = scanner.nextLine();
            return coordinate;
        }
    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    public class Game {

        public static char turn(char[][] board) {
            int countX = 0;
            int countO = 0;
            for (int row = 2; row >= 0; row--) {
                for (int col = 0; col <= 2; col++) {
                    if (board[row][col] == 'X') {
                        countX++;
                    }
                    if (board[row][col] == 'O') {
                        countO++;
                    }
                }
            }
            return countX > countO ? 'O' : 'X';
        }

        public static String checkGame(char[][] board) {
            int countDiaX = 0;
            int countDiaO = 0;
            boolean empty = false;
            String result = "Draw";
            for (int row = 2; row >= 0; row--) {
                int countLineO = 0;
                int countLineX = 0;
                if (board[row][row] == 'X') {
                    countDiaX++;
                    if (countDiaX == 3) {
                        result = "X wins";
                        break;
                    }
                }
                if (board[row][row] == 'O') {
                    countDiaO++;
                    if (countDiaO == 3) {
                        result = "O wins";
                        break;
                    }
                }
                if (board[2][0] == 'X' && board[1][1] == 'X' && board[0][2] == 'X') {
                    result = "X wins";

                    break;
                }
                if (board[0][row] == 'X' && board[1][row] == 'X' && board[2][row] == 'X') {
                    result = "X wins";

                    break;
                }
                if (board[0][row] == 'O' && board[1][row] == 'O' && board[2][row] == 'O') {
                    result = "O wins";

                    break;
                }
                for (int col = 0; col <= 2; col++) {
                    if (board[row][col] == 'X') {
                        countLineX++;
                        if (countLineX == 3) {
                            result = "X wins";

                            break;
                        }
                    } else {
                        countLineX = 0;
                    }

                    if (board[row][col] == 'O') {
                        countLineO++;
                        if (countLineO == 3) {
                            result = "O wins";

                            break;
                        }
                    } else {
                        countLineO = 0;
                    }
                    if (board[row][col] == ' ') {
                        empty = true;
                    }

                }
            }
            if (result.equals("Draw") && empty) {
                result = "Game not finished";
            }
            return result;
        }

        public static void play(char[][] board, Player player1, Player player2) {
            int row = 0;
            int col = 0;
            String coordinates;

            boolean inValid = true;

            while (inValid) {
                if (turn(board) == 'X') {
                    coordinates = player1.makeMove(board);

                } else {

                    coordinates = player2.makeMove(board);
                }
                try {
                    row = getRow(coordinates);
                    col = getCol(coordinates);
                } catch (NumberFormatException e) {

                    row = 50;
                    col = 50;
                }
                inValid = checkPlay(board, row, col);
            }
            board[col][row] = turn(board);
            //printBoard(board);
            if (!checkGame(board).equals("Game not finished")) {
                checkGame(board);
            }

        }

        public static int getRow(String coordinates) {
            return Integer.parseInt(String.valueOf(coordinates.charAt(0))) - 1;
        }

        public static int getCol(String coordinates) {
            int i = 0;
            try {
                i = Integer.parseInt(String.valueOf(coordinates.charAt(2))) - 1;
            } catch (StringIndexOutOfBoundsException e) {
                System.out.println("You must type both column and row");
                return 40;
            }
            return i;
        }


        public static boolean checkPlay(char[][] board, int row, int col) {
            boolean inValid = true;

            if (row >= 0 && row <= 2 && col >= 0 && col <= 2) {
                if (board[col][row] != ' ') {
                    System.out.println("This cell is occupied! Choose another one!");
                    inValid = true;
                } else {

                    inValid = false;
                }
            }
            if (row == 50 && col == 50) {
                System.out.println("You should enter numbers!");
                return true;
            }

            if (row < 0 || row > 2 || col < 0 || col > 2) {
                System.out.println("Coordinates should be from 1 to 3!");
                return true;
            }

            return inValid;
        }


        public void startGame(String play1, String play2) {
            Board board = new Board();
            Player player1;
            Player player2;

            if ("user".equals(play1)) {
                player1 = new Human('X');
            } else if("easy".equals(play1)) {
                player1 = new Easy('X');
            } else {
                player1 = new Medium('X');
            }
            if ("user".equals(play2)) {
                player2 = new Human('O');
            } else if("easy".equals(play2)) {
                player2 = new Easy('O');
            } else {
                player2 = new Medium('O');
            }

            board.fillBoard("         ");
            boolean game = true;
            board.printBoard();
            while (game) {
                play(board.getBoard(), player1, player2);
                if (!checkGame(board.getBoard()).equals("Game not finished")) {
                    board.printBoard();
                    System.out.println(checkGame(board.getBoard()));
                    game = false;
                } else {
                    board.printBoard();
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Easy.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class Easy extends Player {
        static String coordinate;
        char character;

        public Easy(char character) {
            this.character = character;
        }

        @Override
        public String makeMove(char[][] board) {
            System.out.println("Making move level \"easy\"");
            coordinate = easyPlay(board);
            return coordinate;
        }

        public static String easyPlay(char[][] board) {
            Random random = new Random();
            int row = 0;
            int col = 0;
            boolean invalid = true;
            while (invalid) {
                row = random.nextInt(3) + 1;
                col = random.nextInt(3) + 1;
                if (board[col - 1][row - 1] == ' ') {
                    invalid = false;
                }
            }
            return row + " " + col;
        }
    }
  learner_created: true
- name: src/tictactoe/Hard.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/451/implement">JetBrains
    Academy</a>
  time: Fri, 21 Aug 2020 17:38:24 UTC
record: -1
